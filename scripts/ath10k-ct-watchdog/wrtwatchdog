#/bin/sh
#
# Info:			OpenWRT Watchdog Script
# Usage:		This script gets called during embedded linux startup.
#
#				System -> Startup (scroll all the way down)
#
#				# Start wrtwatchdog
# 				bash /root/wrtwatchdog start
#				bash /root/wrtwatchdog debug
#
#				# Logging and Monitoring:
#				bash /root/wrtwatchdog showlog
#				bash /root/wrtwatchdog livelog
#
# Installation:	
# 
# opkg update
# opkg install bash
# chmod +x "/root/wrtwatchdog"
# chmod +x "/root/wrtwatchdog_main.sh"
# bash "/root/wrtwatchdog start"
#
#
# Variables:
#
SERVICE_MAIN_SRC="/root/wrtwatchdog_main.sh"
SERVICE_MAIN_TMP="/tmp/wrtwatchdog_main.sh"
# 
SERVICE_MAIN_LOG="/tmp/wrtwatchdog.log"
SERVICE_PID_FILE="/tmp/wrtwatchdog_main.sh.pid"
SHELL_INTERPRETER="bash"
# 
#
# Functions
createInstance ()
{
	#
	# Usage: createInstance
	#
	# Check prerequisites.
	if [ ! -f "${SERVICE_MAIN_SRC}" ]; then
		echo "$0: Creating service instance FAILED. Install ${SERVICE_MAIN_SRC} first."
		return
	fi
	#
	# Update script copies in "/tmp".
	if [ -f "${SERVICE_MAIN_TMP}" ]; then 
		rm -f "${SERVICE_MAIN_TMP}"
	fi
	cat "${SERVICE_MAIN_SRC}" > "${SERVICE_MAIN_TMP}"
	#
	# Set executable and security permissions.
	chmod +rx "${SERVICE_MAIN_TMP}"
	#
	# Run service instance.
	if [ -f "/bin/${SHELL_INTERPRETER}" ]; then
		echo "$0: Creating new service instance ..."
		set -m
		/bin/${SHELL_INTERPRETER} "${SERVICE_MAIN_TMP}" "${DEBUG_MODE}" > /dev/null &
	else
		echo "$0: Creating service instance FAILED. Install ${SHELL_INTERPRETER} first."
	fi
	return
}

findProcess ()
{
	# 
	# Usage: findProcess <ps result line>
	#
	# Purpose: Searches for previously set environment variable "LOOK_FOR_PROCESS".
	#
	# We got a line from ps similar to:
	# [ ]9396 nobody   13952 S    /usr/bin/httpd
	# 
	TEMP_RESULT=$(echo -n "$1" | grep -v grep | grep "$LOOK_FOR_PROCESS")
	#
	# Check if we found process specified in "LOOK_FOR_PROCESS".
	if test "$TEMP_RESULT"; then
		#
		# Exclude our own PID from results.
		MY_PID=$$
		GOT_PID=$(echo -n "$1" | sed 's/ \+/|/g' | sed 's/^|//' | cut -d '|' -f 1)
		if [ "$MY_PID" != "$GOT_PID" ]; then
			if [ "$NEED_SEPARATOR_ONCE" -eq "0" ]; then
				NEED_SEPARATOR_ONCE=1
			else
				echo -n " "
			fi
			echo -n "$GOT_PID"
		fi
	fi
	return
}

terminateOldInstances ()
{
	# 
	# Usage: terminateOldInstances <name_of_instance>
	# Detect and kill any previously running instances of this service.
	NEED_SEPARATOR_ONCE=0
	LOOK_FOR_PROCESS="$1"
	PS_LIST="$(ps w)"
	PROC_KILL_LIST=$(echo -e "$PS_LIST" | while read file; do findProcess "${file}"; done)
	if test "$PROC_KILL_LIST"; then
		echo "$0: Terminating old \"$LOOK_FOR_PROCESS\" instance(s) #$PROC_KILL_LIST ..."
		kill $PROC_KILL_LIST
	fi
	return
}


#
# Service Main.
DEBUG_MODE=""
#
case "$1" in
'debug')
		# Set DEBUG_MODE to ON.
		DEBUG_MODE="debug"
		;;
esac
#
case "$1" in
'start' | 'reset' | 'restart' | 'debug')
		sh $0 stop
		#
		# Run service main in a new instance.
		createInstance
		#
		exit 0
		;;
'stop')
		if [ -f "${SERVICE_PID_FILE}" ]; then
			kill -INT "$(cat "${SERVICE_PID_FILE}")"
			rm "${SERVICE_PID_FILE}"
		fi
		#
		terminateOldInstances "${SHELL_INTERPRETER} ${SERVICE_MAIN_TMP}"
		#
		exit 0
		;;
'showlog')
		# Show service log.
		tail -n 60 "${SERVICE_MAIN_LOG}"
		exit 0
		;;
'livelog')
		# Show service log with auto-refresh.
		clear
		tail -f "${SERVICE_MAIN_LOG}"
		exit 0
		;;
'diag')
		ps w | egrep "watchdog|tail|logread" | grep -v "grep" | grep -v "livelog" | grep -v "diag"
		exit 0
		;;		
esac
echo "Usage: $0 {start|debug|stop|reset|restart|showlog|livelog}"
exit 0
